// <auto-generated />
using ClientSample.Dbs;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClientSample.Migrations
{
    [DbContext(typeof(WorkflowDbContext))]
    [Migration("20241216135812_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("ClientSample.Dbs.Models.DbCommand", b =>
                {
                    b.Property<int>("CommandID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CommandTypeID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetDeviceID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TemplateID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CommandID");

                    b.HasIndex("CommandTypeID");

                    b.HasIndex("TemplateID");

                    b.ToTable("Commands");
                });

            modelBuilder.Entity("ClientSample.Dbs.Models.DbCommandType", b =>
                {
                    b.Property<int>("CommandTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CommandTypeID");

                    b.ToTable("CommandTypes");

                    b.HasData(
                        new
                        {
                            CommandTypeID = 1,
                            Name = "Send"
                        },
                        new
                        {
                            CommandTypeID = 2,
                            Name = "Receive"
                        });
                });

            modelBuilder.Entity("ClientSample.Dbs.Models.DbCondition", b =>
                {
                    b.Property<int>("ConditionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("KeyID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TemplateID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ConditionID");

                    b.HasIndex("KeyID");

                    b.HasIndex("TemplateID");

                    b.ToTable("Conditions");
                });

            modelBuilder.Entity("ClientSample.Dbs.Models.DbConditionType", b =>
                {
                    b.Property<int>("ConditionTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ConditionTypeID");

                    b.ToTable("ConditionTypes");

                    b.HasData(
                        new
                        {
                            ConditionTypeID = 1,
                            Name = "threshold"
                        },
                        new
                        {
                            ConditionTypeID = 2,
                            Name = "case"
                        });
                });

            modelBuilder.Entity("ClientSample.Dbs.Models.DbKeyMaster", b =>
                {
                    b.Property<int>("KeyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("KeyID");

                    b.ToTable("KeyMasters");

                    b.HasData(
                        new
                        {
                            KeyID = 1,
                            Name = "threshold"
                        },
                        new
                        {
                            KeyID = 2,
                            Name = "SUCCESS"
                        },
                        new
                        {
                            KeyID = 3,
                            Name = "FAILURE"
                        });
                });

            modelBuilder.Entity("ClientSample.Dbs.Models.DbTemplate", b =>
                {
                    b.Property<string>("TemplateID")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ConditionTypeID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FailureNextTemplateID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SuccessNextTemplateID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TemplateTypeID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TemplateID");

                    b.HasIndex("ConditionTypeID");

                    b.HasIndex("TemplateTypeID");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("ClientSample.Dbs.Models.DbTemplateType", b =>
                {
                    b.Property<int>("TemplateTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TemplateTypeID");

                    b.ToTable("TemplateTypes");

                    b.HasData(
                        new
                        {
                            TemplateTypeID = 1,
                            Name = "Threshold"
                        },
                        new
                        {
                            TemplateTypeID = 2,
                            Name = "Case"
                        },
                        new
                        {
                            TemplateTypeID = 3,
                            Name = "End"
                        });
                });

            modelBuilder.Entity("ClientSample.Dbs.Models.DbCommand", b =>
                {
                    b.HasOne("ClientSample.Dbs.Models.DbCommandType", "CommandType")
                        .WithMany("Commands")
                        .HasForeignKey("CommandTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClientSample.Dbs.Models.DbTemplate", "Template")
                        .WithMany("Commands")
                        .HasForeignKey("TemplateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommandType");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("ClientSample.Dbs.Models.DbCondition", b =>
                {
                    b.HasOne("ClientSample.Dbs.Models.DbKeyMaster", "KeyMaster")
                        .WithMany("Conditions")
                        .HasForeignKey("KeyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClientSample.Dbs.Models.DbTemplate", "Template")
                        .WithMany("Conditions")
                        .HasForeignKey("TemplateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KeyMaster");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("ClientSample.Dbs.Models.DbTemplate", b =>
                {
                    b.HasOne("ClientSample.Dbs.Models.DbConditionType", "ConditionType")
                        .WithMany("Templates")
                        .HasForeignKey("ConditionTypeID");

                    b.HasOne("ClientSample.Dbs.Models.DbTemplateType", "TemplateType")
                        .WithMany("Templates")
                        .HasForeignKey("TemplateTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConditionType");

                    b.Navigation("TemplateType");
                });

            modelBuilder.Entity("ClientSample.Dbs.Models.DbCommandType", b =>
                {
                    b.Navigation("Commands");
                });

            modelBuilder.Entity("ClientSample.Dbs.Models.DbConditionType", b =>
                {
                    b.Navigation("Templates");
                });

            modelBuilder.Entity("ClientSample.Dbs.Models.DbKeyMaster", b =>
                {
                    b.Navigation("Conditions");
                });

            modelBuilder.Entity("ClientSample.Dbs.Models.DbTemplate", b =>
                {
                    b.Navigation("Commands");

                    b.Navigation("Conditions");
                });

            modelBuilder.Entity("ClientSample.Dbs.Models.DbTemplateType", b =>
                {
                    b.Navigation("Templates");
                });
#pragma warning restore 612, 618
        }
    }
}
